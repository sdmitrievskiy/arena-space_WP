{"version":3,"sources":["webpack:///./app/scripts/app.js?e48d","webpack:///./~/jquery-columnizer/src/jquery.columnizer.js?82bb"],"names":["require","document","ready","gallery"],"mappings":";;;;;;;AAAA;;;;;;AACA,oBAAAA,CAAQ,CAAR;AACA,oBAAAA,CAAQ,CAAR;;AAGA,uBAAEC,QAAF,EAAYC,KAAZ,CAAkB,YAAY;;AAE1B,2BAAE,eAAF,EAAmBC,OAAnB;AAEH,EAJD,E;;;;;;;ACLA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,iCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL,mBAAkB;AAClB;AACA;;AAEA;AACA;AACA,KAAI;AACJ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4BAA2B,oCAAoC,YAAY;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAkB,wBAAwB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0EAAyE,oCAAoC,YAAY;AACzH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,mCAAmC;AAC1D;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA,oBAAmB,aAAa;AAChC;AACA;AACA;AACA;AACA,sGAAqG,oCAAoC,YAAY;AACrJ;;AAEA;AACA;AACA;AACA;AACA;AACA,uGAAsG,oCAAoC,YAAY;AACtJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,wBAAwB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAM;AACN;AACA;AACA,OAAM;AACN;AACA;AACA,OAAM;AACN;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA,QAAO;AACP;AACA;AACA;AACA,OAAM;AACN;AACA;AACA,4CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAI;AACJ;;AAEA;AACA;AACA;AACA,mCAAkC;AAClC,qDAAoD;AACpD,0DAAyD;AACzD;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA,wCAAuC,iBAAiB;AACxD,2CAA0C,oBAAoB;AAC9D;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAE;AACF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,oBAAmB,8BAA8B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAQ,gCAAgC;AACxC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAC","file":"0.cb2944e9d2d13ce562bc.hot-update.js","sourcesContent":["import $ from 'jquery';\nrequire('./vendor/jquery.gallery.js');\nrequire('jquery-columnizer');\n\n\n$(document).ready(function () {\n\n    $('.dg-container').gallery();\n    \n});\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/scripts/app.js\n **/","// version 1.6.2\n// http://welcome.totheinter.net/columnizer-jquery-plugin/\n// created by: Adam Wulf @adamwulf, adam.wulf@gmail.com\n\n(function($){\n    var DATA_ORIGINAL_DOM_KEY = 'columnizer-original-dom';\n\n $.fn.columnize = function(options) {\n    // save original DOM clone as data\n    this.each(function() {\n        var $el = $(this);\n        $el.data(DATA_ORIGINAL_DOM_KEY, $el.clone(true, true));\n    });\n\n\tthis.cols  =[];\n\tthis.offset= 0;\n\tthis.before=[];\n\tthis.lastOther=0;\n\tthis.prevMax =0;\n\tthis.debug=0;\n\tthis.setColumnStart =null;\n\tthis.elipsisText='';\n\n\tvar defaults = {\n\t\t// default width of columns\n\t\twidth: 400,\n\t\t// optional # of columns instead of width\n\t\tcolumns : false,\n\t\t// true to build columns once regardless of window resize\n\t\t// false to rebuild when content box changes bounds\n\t\tbuildOnce : false,\n\t\t// an object with options if the text should overflow\n\t\t// it's container if it can't fit within a specified height\n\t\toverflow : false,\n\t\t// this function is called after content is columnized\n\t\tdoneFunc : function(){},\n\t\t// if the content should be columnized into a\n\t\t// container node other than it's own node\n\t\ttarget : false,\n\t\t// re-columnizing when images reload might make things\n\t\t// run slow. so flip this to true if it's causing delays\n\t\tignoreImageLoading : true,\n\t\t// should columns float left or right\n\t\tcolumnFloat : \"left\",\n\t\t// ensure the last column is never the tallest column\n\t\tlastNeverTallest : false,\n\t\t// (int) the minimum number of characters to jump when splitting\n\t\t// text nodes. smaller numbers will result in higher accuracy\n\t\t// column widths, but will take slightly longer\n\t\taccuracy : false,\n\t\t// false to round down column widths (for compatibility)\n\t\t// true to conserve all decimals in the column widths\n\t\tprecise : false,\n\t\t// don't automatically layout columns, only use manual columnbreak\n\t\tmanualBreaks : false,\n\t\t// previx for all the CSS classes used by this plugin\n\t\t// default to empty string for backwards compatibility\n\t\tcssClassPrefix : \"\",\n\t\telipsisText:'...',\n\t\tdebug:0\n\t};\n\toptions = $.extend(defaults, options);\n\n\tif(typeof(options.width) == \"string\"){\n\t\toptions.width = parseInt(options.width,10);\n\t\tif(isNaN(options.width)){\n\t\t\toptions.width = defaults.width;\n\t\t}\n\t}\n\tif(typeof options.setColumnStart== 'function') {\n\t\tthis.setColumnStart=options.setColumnStart;\n\t}\n\tif(typeof options.elipsisText== 'string') {\n\t\tthis.elipsisText=options.elipsisText;\n\t}\n\tif(options.debug) { // assert is off by default\n\t\tthis.debug=options.debug;\n\t}\n\tif(!options.setWidth) {\n\t\tif (options.precise) {\n\t\t\toptions.setWidth = function (numCols) {\n\t\t\t\treturn 100 / numCols;\n\t\t\t};\n\t\t} else {\n\t\t\toptions.setWidth = function (numCols) {\n\t\t\t\treturn Math.floor(100 / numCols);\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t * appending a text node to a <table> will\n\t * cause a jquery crash.\n\t * so wrap all append() calls and revert to\n\t * a simple appendChild() in case it fails\n\t */\n\tfunction appendSafe($target, $elem){\n\t\ttry{\n\t\t\t$target.append($elem);\n\t\t}catch(e){\n\t\t\t$target[0].appendChild($elem[0]);\n\t\t}\n\t}\n\n    return this.each(function() {\n\t\tvar $inBox = options.target ? $(options.target) : $(this);\n\t\tvar maxHeight = $(this).height();\n\t\tvar $cache = $('<div></div>'); // this is where we'll put the real content\n\t\tvar lastWidth = 0;\n\t\tvar columnizing = false;\n\t\tvar manualBreaks = options.manualBreaks;\n\t\tvar cssClassPrefix = defaults.cssClassPrefix;\n\t\tif(typeof(options.cssClassPrefix) == \"string\"){\n\t\t\tcssClassPrefix = options.cssClassPrefix;\n\t\t}\n\n\n\t\tvar adjustment = 0;\n\n\t\tappendSafe($cache, $(this).contents().clone(true));\n\n\t\t// images loading after dom load\n\t\t// can screw up the column heights,\n\t\t// so recolumnize after images load\n\t\tif(!options.ignoreImageLoading && !options.target){\n\t\t\tif(!$inBox.data(\"imageLoaded\")){\n\t\t\t\t$inBox.data(\"imageLoaded\", true);\n\t\t\t\tif($(this).find(\"img\").length > 0){\n\t\t\t\t\t// only bother if there are\n\t\t\t\t\t// actually images...\n\t\t\t\t\tvar func = function($inBox,$cache){ return function(){\n\t\t\t\t\t\t\tif(!$inBox.data(\"firstImageLoaded\")){\n\t\t\t\t\t\t\t\t$inBox.data(\"firstImageLoaded\", \"true\");\n\t\t\t\t\t\t\t\tappendSafe($inBox.empty(), $cache.children().clone(true));\n\t\t\t\t\t\t\t\t$inBox.columnize(options);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}($(this), $cache);\n\t\t\t\t\t$(this).find(\"img\").one(\"load\", func);\n\t\t\t\t\t$(this).find(\"img\").one(\"abort\", func);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$inBox.empty();\n\n\t\tcolumnizeIt();\n\n\t\tif(!options.buildOnce){\n\t\t\t$(window).resize(function() {\n\t\t\t\tif(!options.buildOnce){\n\t\t\t\t\tif($inBox.data(\"timeout\")){\n\t\t\t\t\t\tclearTimeout($inBox.data(\"timeout\"));\n\t\t\t\t\t}\n\t\t\t\t\t$inBox.data(\"timeout\", setTimeout(columnizeIt, 200));\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tfunction prefixTheClassName(className, withDot){\n\t\t\tvar dot = withDot ? \".\" : \"\";\n\t\t\tif(cssClassPrefix.length){\n\t\t\t\treturn dot + cssClassPrefix + \"-\" + className;\n\t\t\t}\n\t\t\treturn dot + className;\n\t\t}\n\n\t\t/**\n\t\t * this fuction builds as much of a column as it can without\n\t\t * splitting nodes in half. If the last node in the new column\n\t\t * is a text node, then it will try to split that text node. otherwise\n\t\t * it will leave the node in $pullOutHere and return with a height\n\t\t * smaller than targetHeight.\n\t\t *\n         * Returns a boolean on whether we did some splitting successfully at a text point\n         * (so we know we don't need to split a real element). return false if the caller should\n         * split a node if possible to end this column.\n\t\t *\n\t\t * @param putInHere, the jquery node to put elements into for the current column\n\t\t * @param $pullOutHere, the jquery node to pull elements out of (uncolumnized html)\n\t\t * @param $parentColumn, the jquery node for the currently column that's being added to\n\t\t * @param targetHeight, the ideal height for the column, get as close as we can to this height\n\t\t */\n\t\tfunction columnize($putInHere, $pullOutHere, $parentColumn, targetHeight){\n\t\t\t//\n\t\t\t// add as many nodes to the column as we can,\n\t\t\t// but stop once our height is too tall\n\t\t\twhile((manualBreaks || $parentColumn.height() < targetHeight) &&\n\t\t\t\t$pullOutHere[0].childNodes.length){\n\t\t\t\tvar node = $pullOutHere[0].childNodes[0];\n\t\t\t\t//\n\t\t\t\t// Because we're not cloning, jquery will actually move the element\"\n\t\t\t\t// http://welcome.totheinter.net/2009/03/19/the-undocumented-life-of-jquerys-append/\n\t\t\t\tif($(node).find(prefixTheClassName(\"columnbreak\", true)).length){\n\t\t\t\t\t//\n\t\t\t\t\t// our column is on a column break, so just end here\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif($(node).hasClass(prefixTheClassName(\"columnbreak\"))){\n\t\t\t\t\t//\n\t\t\t\t\t// our column is on a column break, so just end here\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tappendSafe($putInHere, $(node));\n\t\t\t}\n\t\t\tif($putInHere[0].childNodes.length === 0) return;\n\n\t\t\t// now we're too tall, so undo the last one\n\t\t\tvar kids = $putInHere[0].childNodes;\n\t\t\tvar lastKid = kids[kids.length-1];\n\t\t\t$putInHere[0].removeChild(lastKid);\n\t\t\tvar $item = $(lastKid);\n\n\t\t\t// now lets try to split that last node\n\t\t\t// to fit as much of it as we can into this column\n\t\t\tif($item[0].nodeType == 3){\n\t\t\t\t// it's a text node, split it up\n\t\t\t\tvar oText = $item[0].nodeValue;\n\t\t\t\tvar counter2 = options.width / 18;\n\t\t\t\tif(options.accuracy)\n\t\t\t\tcounter2 = options.accuracy;\n\t\t\t\tvar columnText;\n\t\t\t\tvar latestTextNode = null;\n\t\t\t\twhile($parentColumn.height() < targetHeight && oText.length){\n\t\t\t\t\t//\n\t\t\t\t\t// it's been brought up that this won't work for chinese\n\t\t\t\t\t// or other languages that don't have the same use of whitespace\n\t\t\t\t\t// as english. This will need to be updated in the future\n\t\t\t\t\t// to better handle non-english languages.\n\t\t\t\t\t//\n\t\t\t\t\t// https://github.com/adamwulf/Columnizer-jQuery-Plugin/issues/124\n\t\t\t\t\tvar indexOfSpace = oText.indexOf(' ', counter2);\n\t\t\t\t\tif (indexOfSpace != -1) {\n\t\t\t\t\t\tcolumnText = oText.substring(0, indexOfSpace);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcolumnText = oText;\n\t\t\t\t\t}\n\t\t\t\t\tlatestTextNode = document.createTextNode(columnText);\n\t\t\t\t\tappendSafe($putInHere, $(latestTextNode));\n\n\t\t\t\t\tif(oText.length > counter2 && indexOfSpace != -1){\n\t\t\t\t\t\toText = oText.substring(indexOfSpace);\n\t\t\t\t\t}else{\n\t\t\t\t\t\toText = \"\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif($parentColumn.height() >= targetHeight && latestTextNode !== null){\n\t\t\t\t\t// too tall :(\n\t\t\t\t\t$putInHere[0].removeChild(latestTextNode);\n\t\t\t\t\toText = latestTextNode.nodeValue + oText;\n\t\t\t\t}\n\t\t\t\tif(oText.length){\n\t\t\t\t\t$item[0].nodeValue = oText;\n\t\t\t\t}else{\n\t\t\t\t\treturn false; // we ate the whole text node, move on to the next node\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif($pullOutHere.contents().length){\n\t\t\t\t$pullOutHere.prepend($item);\n\t\t\t}else{\n\t\t\t\tappendSafe($pullOutHere, $item);\n\t\t\t}\n\n\t\t\treturn $item[0].nodeType == 3;\n\t\t}\n\n\t\t/**\n\t\t * Split up an element, which is more complex than splitting text. We need to create\n\t\t * two copies of the element with it's contents divided between each\n\t\t */\n\t\tfunction split($putInHere, $pullOutHere, $parentColumn, targetHeight){\n\t\t\tif($putInHere.contents(\":last\").find(prefixTheClassName(\"columnbreak\", true)).length){\n\t\t\t\t//\n\t\t\t\t// our column is on a column break, so just end here\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif($putInHere.contents(\":last\").hasClass(prefixTheClassName(\"columnbreak\"))){\n\t\t\t\t//\n\t\t\t\t// our column is on a column break, so just end here\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif($pullOutHere.contents().length){\n\t\t\t\tvar $cloneMe = $pullOutHere.contents(\":first\");\n\t\t\t\t//\n\t\t\t\t// make sure we're splitting an element\n\t\t\t\tif( typeof $cloneMe.get(0) == 'undefined' || $cloneMe.get(0).nodeType != 1 ) return;\n\n\t\t\t\t//\n\t\t\t\t// clone the node with all data and events\n\t\t\t\tvar $clone = $cloneMe.clone(true);\n\t\t\t\t//\n\t\t\t\t// need to support both .prop and .attr if .prop doesn't exist.\n\t\t\t\t// this is for backwards compatibility with older versions of jquery.\n\t\t\t\tif($cloneMe.hasClass(prefixTheClassName(\"columnbreak\"))){\n\t\t\t\t\t//\n\t\t\t\t\t// ok, we have a columnbreak, so add it into\n\t\t\t\t\t// the column and exit\n\t\t\t\t\tappendSafe($putInHere, $clone);\n\t\t\t\t\t$cloneMe.remove();\n\t\t\t\t}else if (manualBreaks){\n\t\t\t\t\t// keep adding until we hit a manual break\n\t\t\t\t\tappendSafe($putInHere, $clone);\n\t\t\t\t\t$cloneMe.remove();\n\t\t\t\t}else if($clone.get(0).nodeType == 1 && !$clone.hasClass(prefixTheClassName(\"dontend\"))){\n\t\t\t\t\tappendSafe($putInHere, $clone);\n\t\t\t\t\tif($clone.is(\"img\") && $parentColumn.height() < targetHeight + 20){\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// we can't split an img in half, so just add it\n\t\t\t\t\t\t// to the column and remove it from the pullOutHere section\n\t\t\t\t\t\t$cloneMe.remove();\n\t\t\t\t\t}else if($cloneMe.hasClass(prefixTheClassName(\"dontsplit\")) && $parentColumn.height() < targetHeight + 20){\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// pretty close fit, and we're not allowed to split it, so just\n\t\t\t\t\t\t// add it to the column, remove from pullOutHere, and be done\n\t\t\t\t\t\t$cloneMe.remove();\n\t\t\t\t\t}else if($clone.is(\"img\") || $cloneMe.hasClass(prefixTheClassName(\"dontsplit\"))){\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// it's either an image that's too tall, or an unsplittable node\n\t\t\t\t\t\t// that's too tall. leave it in the pullOutHere and we'll add it to the\n\t\t\t\t\t\t// next column\n\t\t\t\t\t\t$clone.remove();\n\t\t\t\t\t}else{\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// ok, we're allowed to split the node in half, so empty out\n\t\t\t\t\t\t// the node in the column we're building, and start splitting\n\t\t\t\t\t\t// it in half, leaving some of it in pullOutHere\n\t\t\t\t\t\t$clone.empty();\n\t\t\t\t\t\tif(!columnize($clone, $cloneMe, $parentColumn, targetHeight)){\n\t\t\t\t\t\t\t// this node may still have non-text nodes to split\n\t\t\t\t\t\t\t// add the split class and then recur\n\t\t\t\t\t\t\t$cloneMe.addClass(prefixTheClassName(\"split\"));\n\n\t\t\t\t\t\t\t//if this node was ol element, the child should continue the number ordering\n\t\t\t\t\t\t\tif($cloneMe.get(0).tagName == 'OL'){\n\t\t\t\t\t\t\t\tvar startWith = $clone.get(0).childElementCount + $clone.get(0).start;\n\t\t\t\t\t\t\t\t$cloneMe.attr('start',startWith+1);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif($cloneMe.children().length){\n\t\t\t\t\t\t\t\tsplit($clone, $cloneMe, $parentColumn, targetHeight);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t// this node only has text node children left, add the\n\t\t\t\t\t\t\t// split class and move on.\n\t\t\t\t\t\t\t$cloneMe.addClass(prefixTheClassName(\"split\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif($clone.get(0).childNodes.length === 0){\n\t\t\t\t\t\t\t// it was split, but nothing is in it :(\n\t\t\t\t\t\t\t$clone.remove();\n\t\t\t\t\t\t\t$cloneMe.removeClass(prefixTheClassName(\"split\"));\n\t\t\t\t\t\t}else if($clone.get(0).childNodes.length == 1){\n                            // was the only child node a text node w/ whitespace?\n                            var onlyNode = $clone.get(0).childNodes[0];\n                            if(onlyNode.nodeType == 3){\n                                // text node\n                                var nonwhitespace = /\\S/;\n                                var str = onlyNode.nodeValue;\n                                if(!nonwhitespace.test(str)){\n                                    // yep, only a whitespace textnode\n                                    $clone.remove();\n\t\t\t\t\t\t\t\t\t$cloneMe.removeClass(prefixTheClassName(\"split\"));\n                                }\n                            }\n                        }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\tfunction singleColumnizeIt() {\n\t\t\tif ($inBox.data(\"columnized\") && $inBox.children().length == 1) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t$inBox.data(\"columnized\", true);\n\t\t\t$inBox.data(\"columnizing\", true);\n\n\t\t\t$inBox.empty();\n\t\t\t$inBox.append($(\"<div class='\"\n\t\t\t\t+ prefixTheClassName(\"first\") + \" \"\n\t\t\t\t+ prefixTheClassName(\"last\") + \" \"\n\t\t\t\t+ prefixTheClassName(\"column\") + \" \"\n\t\t\t\t+ \"' style='width:100%; float: \" + options.columnFloat + \";'></div>\")); //\"\n\t\t\t$col = $inBox.children().eq($inBox.children().length-1);\n\t\t\t$destroyable = $cache.clone(true);\n\t\t\tif(options.overflow){\n\t\t\t\ttargetHeight = options.overflow.height;\n\t\t\t\tcolumnize($col, $destroyable, $col, targetHeight);\n\t\t\t\t// make sure that the last item in the column isn't a \"dontend\"\n\t\t\t\tif(!$destroyable.contents().find(\":first-child\").hasClass(prefixTheClassName(\"dontend\"))){\n\t\t\t\t\tsplit($col, $destroyable, $col, targetHeight);\n\t\t\t\t}\n\n\t\t\t\twhile($col.contents(\":last\").length && checkDontEndColumn($col.contents(\":last\").get(0))){\n\t\t\t\t\tvar $lastKid = $col.contents(\":last\");\n\t\t\t\t\t$lastKid.remove();\n\t\t\t\t\t$destroyable.prepend($lastKid);\n\t\t\t\t}\n\n\t\t\t\tvar html = \"\";\n\t\t\t\tvar div = document.createElement('DIV');\n\t\t\t\twhile($destroyable[0].childNodes.length > 0){\n\t\t\t\t\tvar kid = $destroyable[0].childNodes[0];\n\t\t\t\t\tif(kid.attributes){\n\t\t\t\t\t\tfor(var i=0;i<kid.attributes.length;i++){\n\t\t\t\t\t\t\tif(kid.attributes[i].nodeName.indexOf(\"jQuery\") === 0){\n\t\t\t\t\t\t\t\tkid.removeAttribute(kid.attributes[i].nodeName);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdiv.innerHTML = \"\";\n\t\t\t\t\tdiv.appendChild($destroyable[0].childNodes[0]);\n\t\t\t\t\thtml += div.innerHTML;\n\t\t\t\t}\n\t\t\t\tvar overflow = $(options.overflow.id)[0];\n\t\t\t\toverflow.innerHTML = html;\n\n\t\t\t}else{\n\t\t\t\tappendSafe($col, $destroyable.contents());\n\t\t\t}\n\t\t\t$inBox.data(\"columnizing\", false);\n\n\t\t\tif(options.overflow && options.overflow.doneFunc){\n\t\t\t\toptions.overflow.doneFunc();\n\t\t\t}\n\t\t\toptions.doneFunc();\n\t\t}\n\n\t\t/**\n\t\t * returns true if the input dom node\n\t\t * should not end a column.\n\t\t * returns false otherwise\n\t\t */\n\t\tfunction checkDontEndColumn(dom){\n\t\t\tif(dom.nodeType == 3){\n\t\t\t\t// text node. ensure that the text\n\t\t\t\t// is not 100% whitespace\n\t\t\t\tif(/^\\s+$/.test(dom.nodeValue)){\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// ok, it's 100% whitespace,\n\t\t\t\t\t\t// so we should return checkDontEndColumn\n\t\t\t\t\t\t// of the inputs previousSibling\n\t\t\t\t\t\tif(!dom.previousSibling) return false;\n\t\t\t\t\treturn checkDontEndColumn(dom.previousSibling);\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(dom.nodeType != 1) return false;\n\t\t\tif($(dom).hasClass(prefixTheClassName(\"dontend\"))) return true;\n\t\t\tif(dom.childNodes.length === 0) return false;\n\t\t\treturn checkDontEndColumn(dom.childNodes[dom.childNodes.length-1]);\n\t\t}\n\n\t\tfunction columnizeIt() {\n\t\t\t//reset adjustment var\n\t\t\tadjustment = 0;\n\t\t\tif(lastWidth == $inBox.width()) return;\n\t\t\tlastWidth = $inBox.width();\n\n\t\t\tvar numCols = Math.round($inBox.width() / options.width);\n\t\t\tvar optionWidth = options.width;\n\t\t\tvar optionHeight = options.height;\n\t\t\tif(options.columns) numCols = options.columns;\n\t\t\tif(manualBreaks){\n\t\t\t\tnumCols = $cache.find(prefixTheClassName(\"columnbreak\", true)).length + 1;\n\t\t\t\toptionWidth = false;\n\t\t\t}\n\n//\t\t\tif ($inBox.data(\"columnized\") && numCols == $inBox.children().length) {\n//\t\t\t\treturn;\n//\t\t\t}\n\t\t\tif(numCols <= 1){\n\t\t\t\treturn singleColumnizeIt();\n\t\t\t}\n\t\t\tif($inBox.data(\"columnizing\")) return;\n\t\t\t$inBox.data(\"columnized\", true);\n\t\t\t$inBox.data(\"columnizing\", true);\n\n\t\t\t$inBox.empty();\n\t\t\t$inBox.append($(\"<div style='width:\" + options.setWidth(numCols) + \"%; float: \" + options.columnFloat + \";'></div>\")); //\"\n\t\t\t$col = $inBox.children(\":last\");\n\t\t\tappendSafe($col, $cache.clone());\n\t\t\tmaxHeight = $col.height();\n\t\t\t$inBox.empty();\n\n\t\t\tvar targetHeight = maxHeight / numCols;\n\t\t\tvar firstTime = true;\n\t\t\tvar maxLoops = 3;\n\t\t\tvar scrollHorizontally = false;\n\t\t\tif(options.overflow){\n\t\t\t\tmaxLoops = 1;\n\t\t\t\ttargetHeight = options.overflow.height;\n\t\t\t}else if(optionHeight && optionWidth){\n\t\t\t\tmaxLoops = 1;\n\t\t\t\ttargetHeight = optionHeight;\n\t\t\t\tscrollHorizontally = true;\n\t\t\t}\n\n\t\t\t//\n\t\t\t// We loop as we try and workout a good height to use. We know it initially as an average\n\t\t\t// but if the last column is higher than the first ones (which can happen, depending on split\n\t\t\t// points) we need to raise 'adjustment'. We try this over a few iterations until we're 'solid'.\n\t\t\t//\n\t\t\t// also, lets hard code the max loops to 20. that's /a lot/ of loops for columnizer,\n\t\t\t// and should keep run aways in check. if somehow someone has content combined with\n\t\t\t// options that would cause an infinite loop, then this'll definitely stop it.\n\t\t\tfor(var loopCount=0;loopCount<maxLoops && loopCount<20;loopCount++){\n\t\t\t\t$inBox.empty();\n\t\t\t\tvar $destroyable, className, $col, $lastKid;\n\t\t\t\ttry{\n\t\t\t\t\t$destroyable = $cache.clone(true);\n\t\t\t\t}catch(e){\n\t\t\t\t\t// jquery in ie6 can't clone with true\n\t\t\t\t\t$destroyable = $cache.clone();\n\t\t\t\t}\n\t\t\t\t$destroyable.css(\"visibility\", \"hidden\");\n\t\t\t\t// create the columns\n\t\t\t\tfor (var i = 0; i < numCols; i++) {\n\t\t\t\t\t/* create column */\n\t\t\t\t\tclassName = (i === 0) ? prefixTheClassName(\"first\") : \"\";\n\t\t\t\t\tclassName += \" \" + prefixTheClassName(\"column\");\n\t\t\t\t\tclassName = (i == numCols - 1) ? (prefixTheClassName(\"last\") + \" \" + className) : className;\n\t\t\t\t\t$inBox.append($(\"<div class='\" + className + \"' style='width:\" + options.setWidth(numCols) + \"%; float: \" + options.columnFloat + \";'></div>\")); //\"\n\t\t\t\t}\n\n\t\t\t\t// fill all but the last column (unless overflowing)\n\t\t\t\ti = 0;\n\t\t\t\twhile(i < numCols - (options.overflow ? 0 : 1) || scrollHorizontally && $destroyable.contents().length){\n\t\t\t\t\tif($inBox.children().length <= i){\n\t\t\t\t\t\t// we ran out of columns, make another\n\t\t\t\t\t\t$inBox.append($(\"<div class='\" + className + \"' style='width:\" + options.setWidth(numCols) + \"%; float: \" + options.columnFloat + \";'></div>\")); //\"\n\t\t\t\t\t}\n\t\t\t\t\t$col = $inBox.children().eq(i);\n\t\t\t\t\tif(scrollHorizontally){\n\t\t\t\t\t\t$col.width(optionWidth + \"px\");\n\t\t\t\t\t}\n\t\t\t\t\tcolumnize($col, $destroyable, $col, targetHeight);\n\t\t\t\t\t// make sure that the last item in the column isn't a \"dontend\"\n\t\t\t\t\tsplit($col, $destroyable, $col, targetHeight);\n\n\t\t\t\t\twhile($col.contents(\":last\").length && checkDontEndColumn($col.contents(\":last\").get(0))){\n\t\t\t\t\t\t$lastKid = $col.contents(\":last\");\n\t\t\t\t\t\t$lastKid.remove();\n\t\t\t\t\t\t$destroyable.prepend($lastKid);\n\t\t\t\t\t}\n\t\t\t\t\ti++;\n\n\t\t\t\t\t//\n\t\t\t\t\t// https://github.com/adamwulf/Columnizer-jQuery-Plugin/issues/47\n\t\t\t\t\t//\n\t\t\t\t\t// check for infinite loop.\n\t\t\t\t\t//\n\t\t\t\t\t// this could happen when a dontsplit or dontend item is taller than the column\n\t\t\t\t\t// we're trying to build, and its never actually added to a column.\n\t\t\t\t\t//\n\t\t\t\t\t// this results in empty columns being added with the dontsplit item\n\t\t\t\t\t// perpetually waiting to get put into a column. lets force the issue here\n\t\t\t\t\tif($col.contents().length === 0 && $destroyable.contents().length){\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// ok, we're building zero content columns. this'll happen forever\n\t\t\t\t\t\t// since nothing can ever get taken out of destroyable.\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// to fix, lets put 1 item from destroyable into the empty column\n\t\t\t\t\t\t// before we iterate\n\t\t\t\t\t\t$col.append($destroyable.contents(\":first\"));\n\t\t\t\t\t}else if(i == numCols - (options.overflow ? 0 : 1) && !options.overflow){\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// ok, we're about to exit the while loop because we're done with all\n\t\t\t\t\t\t// columns except the last column.\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// if $destroyable still has columnbreak nodes in it, then we need to keep\n\t\t\t\t\t\t// looping and creating more columns.\n\t\t\t\t\t\tif($destroyable.find(prefixTheClassName(\"columnbreak\", true)).length){\n\t\t\t\t\t\t\tnumCols ++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(options.overflow && !scrollHorizontally){\n\t\t\t\t\tvar IE6 = false;\n\t\t\t\t\t/*@cc_on\n\t\t\t\t\t@if (@_jscript_version < 5.7)\n\t\t\t\t\t\tIE6 = true;\n\t\t\t\t\t@end\n\t\t\t\t\t@*/\n\t\t\t\t\tvar IE7 = (document.all) && (navigator.appVersion.indexOf(\"MSIE 7.\") != -1);\n\t\t\t\t\tif(IE6 || IE7){\n\t\t\t\t\t\tvar html = \"\";\n\t\t\t\t\t\tvar div = document.createElement('DIV');\n\t\t\t\t\t\twhile($destroyable[0].childNodes.length > 0){\n\t\t\t\t\t\t\tvar kid = $destroyable[0].childNodes[0];\n\t\t\t\t\t\t\tfor(i=0;i<kid.attributes.length;i++){\n\t\t\t\t\t\t\t\tif(kid.attributes[i].nodeName.indexOf(\"jQuery\") === 0){\n\t\t\t\t\t\t\t\t\tkid.removeAttribute(kid.attributes[i].nodeName);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdiv.innerHTML = \"\";\n\t\t\t\t\t\t\tdiv.appendChild($destroyable[0].childNodes[0]);\n\t\t\t\t\t\t\thtml += div.innerHTML;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar overflow = $(options.overflow.id)[0];\n\t\t\t\t\t\toverflow.innerHTML = html;\n\t\t\t\t\t}else{\n\t\t\t\t\t\t$(options.overflow.id).empty().append($destroyable.contents().clone(true));\n\t\t\t\t\t}\n\t\t\t\t}else if(!scrollHorizontally){\n\t\t\t\t\t// the last column in the series\n\t\t\t\t\t$col = $inBox.children().eq($inBox.children().length-1);\n\t\t\t\t\t$destroyable.contents().each( function() {\n\t\t\t\t\t\t$col.append( $(this) );\n\t\t\t\t\t});\n\t\t\t\t\tvar afterH = $col.height();\n\t\t\t\t\tvar diff = afterH - targetHeight;\n\t\t\t\t\tvar totalH = 0;\n\t\t\t\t\tvar min = 10000000;\n\t\t\t\t\tvar max = 0;\n\t\t\t\t\tvar lastIsMax = false;\n\t\t\t\t\tvar numberOfColumnsThatDontEndInAColumnBreak = 0;\n\t\t\t\t\t$inBox.children().each(function($inBox){ return function($item){\n\t\t\t\t\t\tvar $col = $inBox.children().eq($item);\n\t\t\t\t\t\tvar endsInBreak = $col.children(\":last\").find(prefixTheClassName(\"columnbreak\", true)).length;\n\t\t\t\t\t\tif(!endsInBreak){\n\t\t\t\t\t\t\tvar h = $col.height();\n\t\t\t\t\t\t\tlastIsMax = false;\n\t\t\t\t\t\t\ttotalH += h;\n\t\t\t\t\t\t\tif(h > max) {\n\t\t\t\t\t\t\t\tmax = h;\n\t\t\t\t\t\t\t\tlastIsMax = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(h < min) min = h;\n\t\t\t\t\t\t\tnumberOfColumnsThatDontEndInAColumnBreak++;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}($inBox));\n\n\t\t\t\t\tvar avgH = totalH / numberOfColumnsThatDontEndInAColumnBreak;\n\t\t\t\t\tif(totalH === 0){\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// all columns end in a column break,\n\t\t\t\t\t\t// so we're done here\n\t\t\t\t\t\tloopCount = maxLoops;\n\t\t\t\t\t}else if(options.lastNeverTallest && lastIsMax){\n\t\t\t\t\t\t// the last column is the tallest\n\t\t\t\t\t\t// so allow columns to be taller\n\t\t\t\t\t\t// and retry\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// hopefully this'll mean more content fits into\n\t\t\t\t\t\t// earlier columns, so that the last column\n\t\t\t\t\t\t// can be shorter than the rest\n\t\t\t\t\t\tadjustment += 5;\n\n\t\t\t\t\t\ttargetHeight = targetHeight + 30;\n\t\t\t\t\t\tif(loopCount == maxLoops-1) maxLoops++;\n\t\t\t\t\t}else if(max - min > 30){\n\t\t\t\t\t\t// too much variation, try again\n\t\t\t\t\t\ttargetHeight = avgH + 30;\n\t\t\t\t\t}else if(Math.abs(avgH-targetHeight) > 20){\n\t\t\t\t\t\t// too much variation, try again\n\t\t\t\t\t\ttargetHeight = avgH;\n\t\t\t\t\t}else {\n\t\t\t\t\t\t// solid, we're done\n\t\t\t\t\t\tloopCount = maxLoops;\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\t// it's scrolling horizontally, fix the width/classes of the columns\n\t\t\t\t\t$inBox.children().each(function(i){\n\t\t\t\t\t\t$col = $inBox.children().eq(i);\n\t\t\t\t\t\t$col.width(optionWidth + \"px\");\n\t\t\t\t\t\tif(i === 0){\n\t\t\t\t\t\t\t$col.addClass(prefixTheClassName(\"first\"));\n\t\t\t\t\t\t}else if(i==$inBox.children().length-1){\n\t\t\t\t\t\t\t$col.addClass(prefixTheClassName(\"last\"));\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t$col.removeClass(prefixTheClassName(\"first\"));\n\t\t\t\t\t\t\t$col.removeClass(prefixTheClassName(\"last\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t$inBox.width($inBox.children().length * optionWidth + \"px\");\n\t\t\t\t}\n\t\t\t\t$inBox.append($(\"<br style='clear:both;'>\"));\n\t\t\t}\n\t\t\t$inBox.find(prefixTheClassName(\"column\", true)).find(\":first\" + prefixTheClassName(\"removeiffirst\", true)).remove();\n\t\t\t$inBox.find(prefixTheClassName(\"column\", true)).find(':last' + prefixTheClassName(\"removeiflast\", true)).remove();\n\t\t\t$inBox.find(prefixTheClassName(\"split\", true)).find(\":first\" + prefixTheClassName(\"removeiffirst\", true)).remove();\n\t\t\t$inBox.find(prefixTheClassName(\"split\", true)).find(':last' + prefixTheClassName(\"removeiflast\", true)).remove();\n\t\t\t$inBox.data(\"columnizing\", false);\n\n\t\t\tif(options.overflow){\n\t\t\t\toptions.overflow.doneFunc();\n\t\t\t}\n\t\t\toptions.doneFunc();\n\t\t}\n    });\n };\n\n$.fn.uncolumnize = function() {\n    // revert to initial DOM\n    this.each(function() {\n        var $el = $(this),\n            $clone;\n\n        if($clone = $el.data(DATA_ORIGINAL_DOM_KEY)) {\n            $el.replaceWith($clone);\n        }\n    });\n};\n\n$.fn.renumberByJS=function($searchTag, $colno, $targetId, $targetClass ) {\n\tthis.setList = function($cols, $list, $tag1) {\n\t\tvar $parents\t= this.before.parents();\n\t\tvar $rest;\n\n\t\t$rest\t\t\t= $($cols[this.offset-1]).find('>*');\n\n\t\tif( ($rest.last())[0].tagName!=$tag1.toUpperCase()) {\n\t\t\tif(this.debug) {\n\t\t\t\tconsole.log(\"Last item in previous column, isn't a list...\");\n\t\t\t}\n\t\t\treturn 0;\n\t\t}\n\t\t$rest\t\t\t= $rest.length;\n\t\tvar $tint\t\t= 1;\n\n\t\tif(this.lastOther<=0) {\n\t\t\t$tint\t\t= this.before.children().length+1;\n\t\t} else {\n\t\t\t$tint\t\t= $($parents[this.lastOther]).children().length+1;\n\t\t}\n\t\t// if the first LI in the current column is split, decrement, as we want the same number/key\n\t\tif( $($cols[this.offset]).find($tag1+':first li.split').length ) {\n\t\t\tvar $whereElipsis=$($cols[this.offset-1]).find($tag1+':last li:last');\n\t\t\tif( this.elipsisText==='' ||\n\t\t\t\t$($cols[this.offset-1]).find($tag1+':last ~ div').length ||\n\t\t\t\t$($cols[this.offset-1]).find($tag1+':last ~ p').length  ) {\n\t\t\t\t;\n\t\t\t} else {\n\t\t\t\tif($($whereElipsis).find('ul, ol, dl').length ==0 ) {\n\n\t\t\t\t\tvar $txt=$whereElipsis.last().text();\n\t\t\t\t\t// char counting, 'cus MSIE 8 is appearently stupid\n\t\t\t\t\tvar $len=$txt.length;\n\t\t\t\t\tif($txt.substring($len-1)==';') {\n\t\t\t\t\t\tif($txt.substring($len-4)!=this.elipsisText+';') {\n\t\t\t\t\t\t\t$txt=$txt.substring(0, $len-1)+this.elipsisText+';';\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif($txt.substring($len-3)!=this.elipsisText) {\n\t\t\t\t\t\t\t$txt+=this.elipsisText;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$whereElipsis.last().text($txt);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// an item in split between two columns.  it only holds one key...\n\t\t\tif($($cols[this.offset]).find($tag1+':first >li.split >'+$tag1).length==0) {\n\t\t\t\t$tint--;\n\t\t\t}\n\t\t}\n\t\tif($rest==1) {\n\t\t\t// the last column only held one thing, so assume its wrapped to the column before that as well.\n\t\t\t$tint\t\t+= this.prevMax ;\n\t\t}\n\t\tif(this.nest>1) {\n\t\t\tif(this.debug) {\n\t\t\t\tconsole.log(\"Supposed to be a nested list...decr\");\n\t\t\t}\n\t\t\t$tint--;\n// some how, id previous list starts split, need  secins decrement,\n// if \"split\" is now correct, reference this\n\t\t\tvar $tt\t\t= $($cols[this.offset -1]).find($tag1+':first li.split:first');\n\t\t\tif($tt.length>0) {\n\t\t\t\tif(this.debug) {\n\t\t\t\t\tconsole.log(\"Previous column started with a split item, so that count is one less than expected\");\n\t\t\t\t}\n\t\t\t\t$tint--;\n\t\t\t}\n\n\n\t\t\t$tt\t\t\t= $($cols[this.offset]).find($tag1+':first li:first').clone();\n\t\t\t$tt.children().remove();\n\t\t\tif( $.trim($tt.text()).length>0 ){\n\t\t\t\tif(this.debug) {\n\t\t\t\t\tconsole.log(\"If that was a complete list in the previous column, don't decr.\");\n\t\t\t\t}\n\t\t\t\t$tint++;\n\n\t\t\t\tif($($cols[this.offset-1]).find(\">\"+$tag1+':last ').children().length==0 ) {\n\t\t\t\t\tif(this.debug) {\n\t\t\t\t\t\tconsole.log(\"unless that was empty, in which case revert\");\n\t\t\t\t\t}\n\t\t\t\t\t$tint--;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\t\t\tvar $tt\t\t= $($cols[this.offset]).find($tag1+':first li:first '+$tag1+\".split li.split\");\n\t\t\tif($tt.length>0) {\n\t\t\t\tif(this.debug) {\n\t\t\t\t\tconsole.log(\"[Nested] Column started with a split item, so that count is one less than expected\");\n\t\t\t\t}\n\t\t\t\t$tint--;\n\t\t\t}\n\n\t\t}\n\n\t\tif(this.debug) {\n\t\t\tconsole.log(\"Setting the start value to \"+$tint+\" (\"+this.prevMax +\")\");\n\t\t}\n\t\tif($tint >0) {\n\t\t\t// if the above computation leads to 0, or an empty list (more likely), don't set, leave as 1\n\t\t\tif(typeof this.setColumnStart == 'function') {\n\t\t\t\tthis.setColumnStart($list, $tint);\n\t\t\t} else {\n\t\t\t\t$list.attr('start', $tint);\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\n\tif(typeof $targetId === 'undefined') { $targetId=false; }\n\tif(typeof $targetClass === 'undefined') { $targetClass=false; }\n\tif(! $targetId && !$targetClass ) {\n\t\tthrow \"renumberByJS(): Bad param, must pass an id or a class\";\n\t}\n\n\tvar $target \t\t\t='';\n\tthis.prevMax\t\t\t=1;\n\n\tif($targetClass) {\n\t\t$target \t\t\t=\".\"+$targetClass;\n\t} else {\n\t\t$target \t\t\t=\"#\"+$targetId;\n\t}\n\tvar $tag1\t\t\t\t= $searchTag.toLowerCase();\n\tvar $tag2\t\t\t\t= $searchTag.toUpperCase();\n\n\tthis.cols  \t\t\t\t= $($target);\n\tif(this.debug) {\n\t\tconsole.log(\"There are \"+this.cols.length+\" items, looking for \"+$tag1);\n\t}\n\n\tthis.before\t\t\t\t= $(this.cols[0]).find($tag1+':last');\n\tthis.prevMax\t\t\t= this.before.children().length;\n\n// start at 1, as must compare to previous...\n\tfor(this.offset=1; this.offset<this.cols.length; this.offset++) {\n\t\tif(this.debug) {\n\t\t\tconsole.log(\"iterating \"+this.offset+\"...[of \"+this.cols.length+\"]\");\n\t\t}\n// if the first column again, nothing to the left of you, do nothing...\n\t\tif(this.offset % $colno==0) {\n\t\t\tif(this.debug) {\n\t\t\t\tconsole.log(\"First column (in theory..)\");\n\t\t\t}\n\n\t\t\tthis.prevMax\t= 1;\n\t\t\tcontinue;\n\t\t}\n\n\t\tthis.before\t\t\t= $(this.cols[this.offset-1]).find($tag1+':last');\n// if there are no occurences of the searchTag, do nothing\n\t\tif(this.before.length) {\n\t\t\tif(this.debug) {\n\t\t\t\tconsole.log(\"Have some \"+$searchTag+\" elements in the previous column\");\n\t\t\t}\n\n\t\t\tvar $list\t\t= $(this.cols[this.offset]).find($tag1+':first');\n\t\t\tvar $first\t\t= $(this.cols[this.offset]).find('*:first');\n\t\t\tif($first[0] !== $list[0]) {\n// don't renumber anything, its not a rollover list\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar $parents\t= this.before.parents();\n\t\t\tthis.lastOther\t= 0;\n\t\t\tvar $found\t\t= false;\n\t\t\tfor(; this.lastOther<$parents.length; this.lastOther++) {\n\t\t\t\tif($parents[this.lastOther].tagName != $tag2 && $parents[this.lastOther].tagName != \"LI\") {\n\t\t\t\t\t$found  = true;\n\t\t\t\t\tthis.lastOther--;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.nest\t\t=1;\n\t\t\tif($(this.cols[this.offset]).find(\">\"+$tag1+':first li '+$tag1+\":first\").length) {\n\t\t\t\tthis.nest\t= 2;\n\t\t\t}\n\t\t\tthis.setList(this.cols, $list, $tag1);\n\t\t\tthis.lastOther--;\n\t\t\t$list\t\t\t= $(this.cols[this.offset]).find($tag1+':first li '+$tag1+\":first\");\n\t\t\tif($list.length) {\n// I hope the two columns have same nesting, or its busted\n\n\t\t\t\tthis.before= $(this.cols[this.offset-1]).find(\">\"+$tag1+':last li '+$tag1+\":last\");\n\t\t\t\tthis.prevMax= 0;\n\t\t\t\tthis.nest\t=1;\n\t\t\t\tthis.setList(this.cols, $list, $tag1);\n\t\t\t}\n\t\t\tvar $reset\t\t= $(this.cols[this.offset-1]).find(\">\"+$tag1+':last');\n\t\t\tthis.prevMax\t= $reset.children().length;\n\t\t}\n\t}\n\treturn 0;\n};\n\n})(jQuery);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/jquery-columnizer/src/jquery.columnizer.js\n ** module id = 5\n ** module chunks = 0\n **/"],"sourceRoot":""}